// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace FST.TournamentPlanner.UI.Model
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for ModelClient.
    /// </summary>
    public static partial class ModelClientExtensions
    {
            /// <summary>
            /// Get the tournament by its Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the tournament
            /// </param>
            public static Tournament Get(this IModelClient operations, int id)
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).GetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the tournament by its Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the tournament
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tournament> GetAsync(this IModelClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the list of all tournaments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Tournament> GetAll(this IModelClient operations)
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).GetAllAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of all tournaments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Tournament>> GetAllAsync(this IModelClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set the score for a match. This call is only valid if the match is not
            /// finished yet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='matchId'>
            /// Id of the match
            /// </param>
            /// <param name='scoreOne'>
            /// current score of team one
            /// </param>
            /// <param name='scoreTwo'>
            /// current score of team two
            /// </param>
            public static void SetScoreOnMatch(this IModelClient operations, int? matchId = default(int?), int? scoreOne = default(int?), int? scoreTwo = default(int?))
            {
                Task.Factory.StartNew(s => ((IModelClient)s).SetScoreOnMatchAsync(matchId, scoreOne, scoreTwo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set the score for a match. This call is only valid if the match is not
            /// finished yet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='matchId'>
            /// Id of the match
            /// </param>
            /// <param name='scoreOne'>
            /// current score of team one
            /// </param>
            /// <param name='scoreTwo'>
            /// current score of team two
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetScoreOnMatchAsync(this IModelClient operations, int? matchId = default(int?), int? scoreOne = default(int?), int? scoreTwo = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetScoreOnMatchWithHttpMessagesAsync(matchId, scoreOne, scoreTwo, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Starts the tournament.
            /// This call is only valid if the tournament is in state "Created"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            public static void Start(this IModelClient operations, int tournamentId)
            {
                Task.Factory.StartNew(s => ((IModelClient)s).StartAsync(tournamentId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts the tournament.
            /// This call is only valid if the tournament is in state "Created"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IModelClient operations, int tournamentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.StartWithHttpMessagesAsync(tournamentId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            public static void AddPlayArea(this IModelClient operations, int tournamentId, string name, string description)
            {
                Task.Factory.StartNew(s => ((IModelClient)s).AddPlayAreaAsync(tournamentId, name, description), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddPlayAreaAsync(this IModelClient operations, int tournamentId, string name, string description, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AddPlayAreaWithHttpMessagesAsync(tournamentId, name, description, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='playAreaId'>
            /// </param>
            public static PlayArea GetPlayArea(this IModelClient operations, int tournamentId, int playAreaId)
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).GetPlayAreaAsync(tournamentId, playAreaId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='playAreaId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PlayArea> GetPlayAreaAsync(this IModelClient operations, int tournamentId, int playAreaId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPlayAreaWithHttpMessagesAsync(tournamentId, playAreaId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
