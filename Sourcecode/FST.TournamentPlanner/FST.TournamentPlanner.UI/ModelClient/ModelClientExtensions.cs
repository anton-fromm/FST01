// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace FST.TournamentPlanner.UI.Model
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for ModelClient.
    /// </summary>
    public static partial class ModelClientExtensions
    {
            /// <summary>
            /// Create a new tournament
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Tournament NewTournament(this IModelClient operations)
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).NewTournamentAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new tournament
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tournament> NewTournamentAsync(this IModelClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NewTournamentWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the tournament by its Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the tournament
            /// </param>
            public static Tournament Get(this IModelClient operations, int id)
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).GetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the tournament by its Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id of the tournament
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tournament> GetAsync(this IModelClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the given tournament by its Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteTournament(this IModelClient operations, int id)
            {
                Task.Factory.StartNew(s => ((IModelClient)s).DeleteTournamentAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the given tournament by its Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteTournamentAsync(this IModelClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteTournamentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the list of all tournaments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Tournament> GetAll(this IModelClient operations)
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).GetAllAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the list of all tournaments
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Tournament>> GetAllAsync(this IModelClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the tournament´s master data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournament'>
            /// tournament to update
            /// </param>
            public static Tournament UpdateTournament(this IModelClient operations, Tournament tournament = default(Tournament))
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).UpdateTournamentAsync(tournament), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the tournament´s master data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournament'>
            /// tournament to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Tournament> UpdateTournamentAsync(this IModelClient operations, Tournament tournament = default(Tournament), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTournamentWithHttpMessagesAsync(tournament, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set the score for a match. This call is only valid if the match is not
            /// finished yet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='matchId'>
            /// Id of the match
            /// </param>
            /// <param name='scoreOne'>
            /// current score of team one
            /// </param>
            /// <param name='scoreTwo'>
            /// current score of team two
            /// </param>
            public static void SetScoreOnMatch(this IModelClient operations, int matchId, int scoreOne, int scoreTwo)
            {
                Task.Factory.StartNew(s => ((IModelClient)s).SetScoreOnMatchAsync(matchId, scoreOne, scoreTwo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set the score for a match. This call is only valid if the match is not
            /// finished yet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='matchId'>
            /// Id of the match
            /// </param>
            /// <param name='scoreOne'>
            /// current score of team one
            /// </param>
            /// <param name='scoreTwo'>
            /// current score of team two
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetScoreOnMatchAsync(this IModelClient operations, int matchId, int scoreOne, int scoreTwo, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetScoreOnMatchWithHttpMessagesAsync(matchId, scoreOne, scoreTwo, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// end a match
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='matchId'>
            /// </param>
            public static Match EndMatch(this IModelClient operations, int tournamentId, int matchId)
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).EndMatchAsync(tournamentId, matchId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// end a match
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='matchId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Match> EndMatchAsync(this IModelClient operations, int tournamentId, int matchId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EndMatchWithHttpMessagesAsync(tournamentId, matchId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a match
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='matchId'>
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            public static Match GetMatch(this IModelClient operations, int matchId, int? tournamentId = default(int?))
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).GetMatchAsync(matchId, tournamentId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a match
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='matchId'>
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Match> GetMatchAsync(this IModelClient operations, int matchId, int? tournamentId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMatchWithHttpMessagesAsync(matchId, tournamentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts the tournament.
            /// This call is only valid if the tournament is in state "Created"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            public static void Start(this IModelClient operations, int tournamentId)
            {
                Task.Factory.StartNew(s => ((IModelClient)s).StartAsync(tournamentId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts the tournament.
            /// This call is only valid if the tournament is in state "Created"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StartAsync(this IModelClient operations, int tournamentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.StartWithHttpMessagesAsync(tournamentId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// create a play area
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            public static PlayArea AddPlayArea(this IModelClient operations, int tournamentId, string name, string description)
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).AddPlayAreaAsync(tournamentId, name, description), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// create a play area
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PlayArea> AddPlayAreaAsync(this IModelClient operations, int tournamentId, string name, string description, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPlayAreaWithHttpMessagesAsync(tournamentId, name, description, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// get a play area
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='playAreaId'>
            /// </param>
            public static PlayArea GetPlayArea(this IModelClient operations, int tournamentId, int playAreaId)
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).GetPlayAreaAsync(tournamentId, playAreaId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// get a play area
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='playAreaId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PlayArea> GetPlayAreaAsync(this IModelClient operations, int tournamentId, int playAreaId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPlayAreaWithHttpMessagesAsync(tournamentId, playAreaId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// update play area
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='playAreaId'>
            /// </param>
            /// <param name='playArea'>
            /// </param>
            public static void UpdatePlayArea(this IModelClient operations, int tournamentId, int playAreaId, PlayArea playArea = default(PlayArea))
            {
                Task.Factory.StartNew(s => ((IModelClient)s).UpdatePlayAreaAsync(tournamentId, playAreaId, playArea), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// update play area
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='playAreaId'>
            /// </param>
            /// <param name='playArea'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdatePlayAreaAsync(this IModelClient operations, int tournamentId, int playAreaId, PlayArea playArea = default(PlayArea), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdatePlayAreaWithHttpMessagesAsync(tournamentId, playAreaId, playArea, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// remove a play area
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='playAreaId'>
            /// </param>
            public static void RemovePlayArea(this IModelClient operations, int tournamentId, int playAreaId)
            {
                Task.Factory.StartNew(s => ((IModelClient)s).RemovePlayAreaAsync(tournamentId, playAreaId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// remove a play area
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='playAreaId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemovePlayAreaAsync(this IModelClient operations, int tournamentId, int playAreaId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RemovePlayAreaWithHttpMessagesAsync(tournamentId, playAreaId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Add a new team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            public static Team AddTeam(this IModelClient operations, int tournamentId, string name)
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).AddTeamAsync(tournamentId, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add a new team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Team> AddTeamAsync(this IModelClient operations, int tournamentId, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddTeamWithHttpMessagesAsync(tournamentId, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='teamId'>
            /// </param>
            public static Team GetTeam(this IModelClient operations, int tournamentId, int teamId)
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).GetTeamAsync(tournamentId, teamId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='teamId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Team> GetTeamAsync(this IModelClient operations, int tournamentId, int teamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTeamWithHttpMessagesAsync(tournamentId, teamId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove the team from the tournament
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// Id of the tournament
            /// </param>
            /// <param name='teamId'>
            /// Id of the team
            /// </param>
            public static void RemoveTeam(this IModelClient operations, int tournamentId, int teamId)
            {
                Task.Factory.StartNew(s => ((IModelClient)s).RemoveTeamAsync(tournamentId, teamId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove the team from the tournament
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// Id of the tournament
            /// </param>
            /// <param name='teamId'>
            /// Id of the team
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveTeamAsync(this IModelClient operations, int tournamentId, int teamId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RemoveTeamWithHttpMessagesAsync(tournamentId, teamId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Update an existing team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='teamId'>
            /// Id of the team
            /// </param>
            /// <param name='team'>
            /// </param>
            public static Team UpdateTeam(this IModelClient operations, int tournamentId, int? teamId = default(int?), Team team = default(Team))
            {
                return Task.Factory.StartNew(s => ((IModelClient)s).UpdateTeamAsync(tournamentId, teamId, team), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update an existing team
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tournamentId'>
            /// </param>
            /// <param name='teamId'>
            /// Id of the team
            /// </param>
            /// <param name='team'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Team> UpdateTeamAsync(this IModelClient operations, int tournamentId, int? teamId = default(int?), Team team = default(Team), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTeamWithHttpMessagesAsync(tournamentId, teamId, team, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
