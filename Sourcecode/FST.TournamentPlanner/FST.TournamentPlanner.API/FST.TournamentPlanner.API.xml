<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FST.TournamentPlanner.API</name>
    </assembly>
    <members>
        <member name="T:FST.TournamentPlanner.API.Controllers.TournamentController">
            <summary>
            This class 
            </summary>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.#ctor(FST.TournamentPlanner.API.Services.ITournamentService)">
            <summary>
            Constructor
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.NewTournament(FST.TournamentPlanner.API.Models.Tournament)">
            <summary>
            Create a new tournament
            </summary>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.Get(System.Int32)">
            <summary>
            Get the tournament by its Id
            </summary>
            <param name="tournamentId">Id of the tournament</param>
            <returns>tournament object</returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.DeleteTournament(System.Int32)">
            <summary>
            Delete the given tournament by its Id
            </summary>
            <param name="tournamentId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.GetAll">
            <summary>
            Get the list of all tournaments
            </summary>
            <returns>tournaments</returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.UpdateTournament(System.Int32,FST.TournamentPlanner.API.Models.Tournament)">
            <summary>
            Update the tournamentÂ´s master data
            </summary>
            <param name="tournament">tournament to update</param>
            <param name="tournamentId"></param>
            <returns>updated tournament</returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.SetScoreOnMatch(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the score for a match. This call is only valid if the match is not finished yet
            </summary>
            <param name="matchId">Id of the match</param>
            <param name="scoreOne">current score of team one</param>
            <param name="scoreTwo">current score of team two</param>
            <returns>Resultcode</returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.EndMatch(System.Int32,System.Int32)">
            <summary>
            end a match
            </summary>
            <param name="tournamentId"></param>
            <param name="matchId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.GetMatch(System.Int32,System.Int32)">
            <summary>
            Get a match
            </summary>
            <param name="tournamentId"></param>
            <param name="matchId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.Start(System.Int32)">
            <summary>
            Starts the tournament. 
            This call is only valid if the tournament is in state "Created"
            </summary>
            <param name="tournamentId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.AddPlayArea(System.Int32,System.String,System.String)">
            <summary>
            create a play area
            </summary>
            <param name="tournamentId"></param>
            <param name="name"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.GetPlayArea(System.Int32,System.Int32)">
            <summary>
            get a play area
            </summary>
            <param name="tournamentId"></param>
            <param name="playAreaId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.RemovePlayArea(System.Int32,System.Int32)">
            <summary>
            remove a play area
            </summary>
            <param name="tournamentId"></param>
            <param name="playAreaId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.UpdatePlayArea(System.Int32,System.Int32,FST.TournamentPlanner.API.Models.PlayArea)">
            <summary>
            update play area
            </summary>
            <param name="tournamentId"></param>
            <param name="playAreaId"></param>
            <param name="playArea"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.AddTeam(System.Int32,System.String)">
            <summary>
            Add a new team
            </summary>
            <param name="tournamentId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.GetTeam(System.Int32,System.Int32)">
            <summary>
            Get a team
            </summary>
            <param name="tournamentId"></param>
            <param name="teamId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.RemoveTeam(System.Int32,System.Int32)">
            <summary>
            Remove the team from the tournament
            </summary>
            <param name="tournamentId">Id of the tournament</param>
            <param name="teamId">Id of the team</param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Controllers.TournamentController.UpdateTeam(System.Int32,System.Int32,FST.TournamentPlanner.API.Models.Team)">
            <summary>
            Update an existing team
            </summary>
            <param name="tournamentId"></param>        
            <param name="teamId">Id of the team</param>
            <param name="team"></param>
            <returns></returns>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.Id">
            <summary>
            Id of this match
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.TeamOne">
            <summary>
            First Team in this match
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.TeamTwo">
            <summary>
            Second Team in this match
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.PlayArea">
            <summary>
            Play area this match is held
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.Start">
            <summary>
            Start time of this match
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.End">
            <summary>
            End time of this match
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.TeamOneScore">
            <summary>
            Score of team one
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.TeamTwoScore">
            <summary>
            Score of team two
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.MatchState">
            <summary>
            State of this match
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.Successor">
            <summary>
            Successor of this match
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.FirstPredecessor">
            <summary>
            First predecessor game
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.SecondPredecessor">
            <summary>
            Second predecessor game
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.Looser">
            <summary>
            Looser team of this match
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Match.Winner">
            <summary>
            Winner team of this match
            </summary>
        </member>
        <member name="T:FST.TournamentPlanner.API.Models.PlayArea">
            <summary>
            Class representing a play area
            </summary>
        </member>
        <member name="M:FST.TournamentPlanner.API.Models.PlayArea.#ctor">
            <summary>
            empty c'tor for API Model mapping
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.PlayArea.Id">
            <summary>
            Id of the play area
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.PlayArea.Name">
            <summary>
            Name of the play area
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.PlayArea.Description">
            <summary>
            Description of the play area
            </summary>
        </member>
        <member name="T:FST.TournamentPlanner.API.Models.Team">
            <summary>
            Team class
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Team.Id">
            <summary>
            Id of the team
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Team.Name">
            <summary>
            Name of the team
            </summary>
        </member>
        <member name="T:FST.TournamentPlanner.API.Models.Tournament">
            <summary>
            Knock-out tournament class
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Tournament.Id">
            <summary>
            Id of the tournament
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Tournament.Name">
            <summary>
            Name of the tournament
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Tournament.Description">
            <summary>
            Description of the tournament
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Tournament.StartTime">
            <summary>
            Start day and time of the tournament
            
            Only valid while the tournament is in Created-State<see cref="T:FST.TournamentPlanner.DB.Models.TournamentState"/>
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Tournament.MatchDuration">
            <summary>
            Duration a single match within the tournament
            
            Only valid while the tournament is in Created-State<see cref="T:FST.TournamentPlanner.DB.Models.TournamentState"/>
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Tournament.TeamCount">
            <summary>
            Number of teams in the tournament.
            This number must be expressable as potence of basis 2
            
            Only valid while the tournament is in Created-State<see cref="T:FST.TournamentPlanner.DB.Models.TournamentState"/>
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Tournament.State">
            <summary>
            Current state of the tournament
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Tournament.PlayAreas">
            <summary>
            List of play areas within this tournament
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Tournament.Teams">
            <summary>
            List of teams
            </summary>
        </member>
        <member name="P:FST.TournamentPlanner.API.Models.Tournament.FinalMatch">
            <summary>
            Final match
            </summary>
        </member>
        <member name="T:FST.TournamentPlanner.API.Services.TournamentService">
            <summary>
            Business Logic
            </summary>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.#ctor(FST.TournamentPlanner.API.Repositories.IRepositoryWrapper)">
            <summary>
            ctor
            </summary>
            <param name="repoWrapper"></param>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.Get(System.Int32)">
            <summary>
            Get a specific tournament
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.GetAll">
            <summary>
            Get all tournaments
            </summary>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.AddTournament(FST.TournamentPlanner.API.Models.Tournament)">
            <summary>
            Add a new tournament
            </summary>
            <param name="tournament"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.RemoveTournament(System.Int32)">
            <summary>
            remove a tournament
            </summary>
            <param name="tournamentId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.UpdateTournament(System.Int32,FST.TournamentPlanner.API.Models.Tournament)">
            <summary>
            Update Tournament
            </summary>
            <param name="tournamentId"></param>
            <param name="tournament"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.Start(System.Int32)">
            <summary>
            Start tournament
            </summary>
            <param name="tournamentId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.GenerateRoundLists(FST.TournamentPlanner.DB.Models.Match)">
            <summary>
            Convert the tree of matches to a directory, where the key is the current play round and the value is the list of all matches within the round
            </summary>
            <param name="finalMatch">root element to start navigation from</param>
            <returns>dictionary</returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.CreateBookingForPlayArea(FST.TournamentPlanner.DB.Models.Tournament)">
            <summary>
            create bookings
            </summary>
            <param name="tournament"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.GetMatch(System.Int32,System.Int32)">
            <summary>
            Rerurn a match for a tournament
            </summary>
            <param name="torunamentId"></param>
            <param name="matchId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.SetScore(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set or update a score on match 
            </summary>
            <param name="matchId"></param>
            <param name="scoreOne"></param>
            <param name="scoreTwo"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.EndMatch(System.Int32,System.Int32)">
            <summary>
            End a match
            </summary>
            <param name="tournamentId"></param>
            <param name="matchId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.AddPlayArea(System.Int32,System.String,System.String)">
            <summary>
            Add a new play area
            </summary>
            <param name="tournamentId"></param>
            <param name="name"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.GetPlayArea(System.Int32,System.Int32)">
            <summary>
            Get an existing play area
            </summary>
            <param name="tournamentId"></param>
            <param name="playAreaId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.RemovePlayArea(System.Int32,System.Int32)">
            <summary>
            Remove the given play area from the tournament
            
            Only valid while the tournament is in Created-State<see cref="T:FST.TournamentPlanner.DB.Models.TournamentState"/>
            </summary>
            <param name="tournamentId"></param>
            <param name="playAreaId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.UpdatePlayArea(System.Int32,System.Int32,FST.TournamentPlanner.API.Models.PlayArea)">
            <summary>
            update a play area
            </summary>
            <param name="tournamentId"></param>
            <param name="playAreaId"></param>
            <param name="playArea"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.UpdateTeam(System.Int32,System.Int32,FST.TournamentPlanner.API.Models.Team)">
            <summary>
            Update an existing team
            </summary>
            <param name="tournamentId"></param>
            <param name="teamId"></param>
            <param name="team"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.RemoveTeam(System.Int32,System.Int32)">
            <summary>
            Remove a team
            </summary>
            <param name="tournamentId"></param>
            <param name="teamId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.GetTeam(System.Int32,System.Int32)">
            <summary>
            Get a team
            </summary>
            <param name="tournamentId"></param>
            <param name="teamId"></param>
            <returns></returns>
        </member>
        <member name="M:FST.TournamentPlanner.API.Services.TournamentService.AddTeam(System.Int32,System.String)">
            <summary>
            Add a new team
            </summary>
            <param name="tournamentId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
    </members>
</doc>
